{"version":3,"file":"vendors-node_modules_react-native-async-storage_async-storage_src_index_ts.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/RCTAsyncStorage.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/helpers.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/hooks.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/index.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/shouldFallbackToLegacyNativeModule.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n","// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\nlet RCTAsyncStorage =\n  NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n  NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n  NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  // TurboModuleRegistry falls back to NativeModules so we don't have to try go\n  // assign NativeModules' counterparts if TurboModuleRegistry would resolve\n  // with undefined.\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n","import type { ErrorLike } from './types';\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\n    );\n  }\n\n  if (callback && typeof callback !== 'function') {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\n      );\n    }\n\n    throw new Error(\n      '[AsyncStorage] Expected function as second argument to multiSet'\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== 'string') {\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      console.warn(\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message);\n  (out as any).key = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n","import AsyncStorage from './AsyncStorage';\nimport type { AsyncStorageHook } from './types';\n\nexport function useAsyncStorage(key: string): AsyncStorageHook {\n  return {\n    getItem: (...args) => AsyncStorage.getItem(key, ...args),\n    setItem: (...args) => AsyncStorage.setItem(key, ...args),\n    mergeItem: (...args) => AsyncStorage.mergeItem(key, ...args),\n    removeItem: (...args) => AsyncStorage.removeItem(key, ...args),\n  };\n}\n","import AsyncStorage from './AsyncStorage';\n\nexport { useAsyncStorage } from './hooks';\n\nexport type { AsyncStorageStatic } from './types';\n\nexport default AsyncStorage;\n","import { NativeModules } from 'react-native';\n\nexport function shouldFallbackToLegacyNativeModule(): boolean {\n  const expoConstants =\n    NativeModules['NativeUnimoduleProxy']?.modulesConstants?.ExponentConstants;\n\n  if (expoConstants) {\n    /**\n     * In SDK <= 39, appOwnership is defined in managed apps but executionEnvironment is not.\n     * In bare React Native apps using expo-constants, appOwnership is never defined, so\n     * isLegacySdkVersion will be false in that context.\n     */\n    const isLegacySdkVersion =\n      expoConstants.appOwnership && !expoConstants.executionEnvironment;\n\n    /**\n     * Expo managed apps don't include the @react-native-async-storage/async-storage\n     * native modules yet, but the API interface is the same, so we can use the version\n     * exported from React Native still.\n     *\n     * If in future releases (eg: @react-native-async-storage/async-storage >= 2.0.0) this\n     * will likely not be valid anymore, and the package will need to be included in the Expo SDK\n     * to continue to work.\n     */\n    if (\n      isLegacySdkVersion ||\n      ['storeClient', 'standalone'].includes(expoConstants.executionEnvironment)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","checkValidInput","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs","NativeModules","shouldFallbackToLegacyNativeModule","TurboModuleRegistry","get","Array","isArray","input","console","warn","out","message","ensureArray","e","useAsyncStorage","args","expoConstants","modulesConstants","ExponentConstants","isLegacySdkVersion","appOwnership","executionEnvironment","includes"],"sourceRoot":""}